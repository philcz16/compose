version: "3"
services:
  webapp:
    image: webapp
    build:
      context: ./app
    depends_on:
      - redis
      - mysql
    ports:
      - 8080:80
    volumes:
      - webapp:/var/www/html/storage
    ## we wait for the MySQL container to be up and running
    ## then we run the migration
    ## and finally we start apache
    entrypoint: sh -c "sleep 30 && php /var/www/html/artisan migrate && apache2-foreground"

  queue:
    image: webapp
    depends_on:
      - webapp
    volumes:
      - webapp:/var/www/html/storage
    ## for the queue worker, we use the same image, but run 
    ## artisan queue:work
    entrypoint: php /var/www/html/artisan queue:work --verbose --tries=3 --timeout=60

  scheduler:
    image: webapp
    depends_on:
      - webapp
    ## for the scheduler we use an infinite while loop
    entrypoint: sh -c "while true; do php /var/www/html/artisan schedule:run --verbose & sleep 60; done"

  redis:
    image: redis:4-alpine
    volumes:
      - redis:/data

  mysql:
    image: mysql:5.7
    volumes:
      - mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: webapp
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.3.2
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
  kibana:
    image: docker.elastic.co/kibana/kibana:6.3.2
    ports:
      - "5601:5601"

volumes:
  webapp:
    driver: "local"
  redis:
    driver: "local"
  mysql:
    driver: "local"